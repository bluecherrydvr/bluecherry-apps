#!/bin/bash -e

set -x # trace

. /usr/share/debconf/confmodule

DB_BACKUP_GZ_FILE=/tmp/bc_db.sql.gz

function db_upgrade_err() {
	trap - ERR # avoid recurrence
	# Say something to user
	echo -e "An error occurred while migrating your database to the latest version. Please contact Bluecherry support here: https://bluecherry.zendesk.com/anonymous_requests/new . Provide full  uncut output from console (the above text).\n\nATTENTION! The above log contains your MySQL logins and passwords, please do not post these logs on public forums.\n" >&2
	if [[ -e $DB_BACKUP_GZ_FILE ]]
	then
		echo "Restoring DB from previously taken backup in $DB_BACKUP_GZ_FILE" >&2
		# Drop all tables
		for x in `echo "show tables" | mysql -D"$dbname" -u"$user" -p"$password" | tail -n +2`
		do
			echo "SET FOREIGN_KEY_CHECKS=0; DROP TABLE $x" | mysql -D"$dbname" -u"$user" -p"$password"
		done
		echo "SET FOREIGN_KEY_CHECKS=1" | mysql -D"$dbname" -u"$user" -p"$password" # Restore setting just in case

		# Restore from backup
		gunzip -c $DB_BACKUP_GZ_FILE | mysql -D"$dbname" -u"$user" -p"$password"
	fi

	# Start back the Apache, just in case we have jumped into here from the middle of upgrade procedure
	if [ ! -z `which service` ]; then
		service apache2 start || true
	else
		invoke-rc.d apache2 start || true
	fi

	exit 1 # Indicate failure
}

function apply_db_patches() {
	pushd /usr/share/bluecherry/mysql-upgrade
	# Note that entries must be numeric, and they are traversed in numeric order, ascending
	# Entries are directories, see below
	for x in `ls | sort -n`
	do
		if [[ $x -gt $DB_VERSION ]]
		then
			pushd $x
				# We execute each *.sh script, in lexicographical order
				for y in *.sh
				do
					# Such shell scenraio can make some checks and execute some SQL statements.
					# DB credentials are exported by env vars $dbname, $user, $password for them
					./$y
				done
			popd
		fi
		DB_VERSION=$x # our DB_VERSION is updated
	done
	popd

	# A check
	if [[ "`cat /usr/share/bluecherry/installed_db_version`" != "$DB_VERSION" ]]
	then
		false # Fail the installation
	fi

	# Save new DB_VERSION
	echo "UPDATE GlobalSettings SET value='$DB_VERSION' WHERE parameter = 'G_DB_VERSION'" | mysql -D"$dbname" -u"$user" -p"$password"
}

case "$1" in
	configure|reconfigure)
		ucfr bluecherry /etc/bluecherry.conf

		# Fixup some permissions
		chown -R bluecherry:bluecherry /var/lib/bluecherry
		chmod -R 770 /var/lib/bluecherry
		chown -R bluecherry:bluecherry /var/run/bluecherry
		chmod -R 750 /var/run/bluecherry

		# Create the logfile, because rsyslog might not be able to
		touch /var/log/bluecherry.log

		if id syslog > /dev/null 2>&1; then
			chown syslog:bluecherry /var/log/bluecherry.log
		else
			chown root:bluecherry /var/log/bluecherry.log
		fi
		chmod 640 /var/log/bluecherry.log

		# Apache modules and sites
		a2enmod ssl
		a2enmod php5

		# Remove a file prefiously tracked as conffile from old place
		rm /etc/apache2/sites-{enabled,available}/bluecherry || true

		a2ensite bluecherry.conf

		# Remove php ini (tracked previously as conffile) from old place
		rm /etc/php5/conf.d/bluecherry.ini || true

		if [ ! -z `which service` ]; then
			service apache2 reload || true
			service rsyslog restart || true
		else
			invoke-rc.d apache2 reload || true
			invoke-rc.d rsyslog restart || true
		fi

		if [ ! -e /var/lib/.bcins ]; then
			date +'%s' > /var/lib/.bcins
		fi

		if [ -x /sbin/apparmor_parser ]; then
			: #apparmor_parser -r < /etc/apparmor.d/usr.sbin.bc-server || true
		fi

		# Manage DB

		trap db_upgrade_err ERR # will restore DB from backup and terminate the execution with failure retcode

		if ! [[ -s /etc/bluecherry.conf ]]
		then
			# 0-bytes config - fresh installation
			# Create DB

			# Ask questions
			db_input high bluecherry/mysql_admin_login  || true
			db_input high bluecherry/mysql_admin_password  || true
			db_input high bluecherry/db_name  || true
			db_input high bluecherry/db_user  || true
			db_input high bluecherry/db_password  || true
			db_go  || true

			db_get bluecherry/mysql_admin_login  || true
			export MYSQL_ADMIN_LOGIN="$RET"
			db_get bluecherry/mysql_admin_password  || true
			export MYSQL_ADMIN_PASSWORD="$RET"
			db_get bluecherry/db_name  || true
			export dbname="$RET"
			db_get bluecherry/db_user  || true
			export user="$RET"
			db_get bluecherry/db_password  || true
			export password="$RET"

			# Remove cached answers
			db_fset bluecherry/mysql_admin_login    seen false
			db_fset bluecherry/mysql_admin_password seen false
			db_fset bluecherry/db_name              seen false
			db_fset bluecherry/db_user              seen false
			db_fset bluecherry/db_password          seen false

			# Actually create DB and tables
			echo "DROP DATABASE IF EXISTS $dbname; CREATE DATABASE $dbname" | mysql -u"$MYSQL_ADMIN_LOGIN" -p"$MYSQL_ADMIN_PASSWORD"
			echo "GRANT ALL ON ${dbname}.* to ${user}@'localhost' IDENTIFIED BY '$password'" | mysql -u"$MYSQL_ADMIN_LOGIN" -p"$MYSQL_ADMIN_PASSWORD"

			mysql -u"$user" -p"$password" -D"$dbname" < /usr/share/bluecherry/schema_mysql.sql
			# Save actual DB version
			DB_VERSION=`cat /usr/share/bluecherry/installed_db_version`
			echo "INSERT INTO GlobalSettings (parameter, value) VALUES ('G_DB_VERSION', '$DB_VERSION')" | mysql -u"$user" -p"$password" -D"$dbname"

			# Put initial data into DB
			mysql -u"$user" -p"$password" -D"$dbname" < /usr/share/bluecherry/initial_data_mysql.sql

			# Generate config
			cat /usr/share/bluecherry/bluecherry.conf.in | sed -e "s/_DBC_DBNAME_/${dbname}/"  -e "s/_DBC_DBUSER_/${user}/"  -e "s/_DBC_DBPASS_/${password}/" > /etc/bluecherry.conf

		else
			# Upgrade

			# Any change to initial_data_mysql.sql won't take effect in this
			# branch, so DB patching script must be added to mysql-upgrade dir

			# Parse config for DB credentials
			eval $(sed '/\(dbname\|user\|password\)/!d;s/ *= */=/'";s/\"/'/g" /etc/bluecherry.conf)
			export dbname user password

			# Get DB version
			export DB_VERSION=`echo "SELECT value from GlobalSettings WHERE parameter = 'G_DB_VERSION'" | mysql -D"$dbname" -u"$user" -p"$password" | tail -n 1`

			if [[ "$DB_VERSION" != "`cat /usr/share/bluecherry/installed_db_version`" ]]
			then

				# Notify user through debconf non-blocking dialog that backup is taken
				echo "Going to updgrade Bluecherry DB. Taking a backup into $DB_BACKUP_GZ_FILE just in case" >&2
				# Backup the DB
				mysqldump "$dbname" -u"$user" -p"$password" | gzip -c > $DB_BACKUP_GZ_FILE

				if [[ "$DB_VERSION" == "" ]]
				then
					# If no version stored (pre-2.2 was installed):

					# Stopping our site in Apache to avoid sudden DB modification by our PHP scripts
					# It turns out that reload doesn't help sometimes, so we just stop the whole Apache
					if [ ! -z `which service` ]; then
						service apache2 stop || true
					else
						invoke-rc.d apache2 stop || true
					fi

					# Rename all tables to ${table}_bkp
					for x in `echo "show tables" | mysql -D"$dbname" -u"$user" -p"$password" | tail -n +2`
					do
						echo "RENAME TABLE $x TO ${x}_bkp" | mysql -D"$dbname" -u"$user" -p"$password"
					done

					# Create tables from the reference DB schema
					mysql -u"$user" -p"$password" -D"$dbname" < /usr/share/bluecherry/schema_mysql_2020000.sql

					# Migrate data from all tables
					# Devices.rtsp_rtp_prefer_tcp, added in 2.1.7-7. Workaround for twofold incoherences:
					# 1) Failure of dbconfig-common to apply a DB patch to add it
					# 2) Different fields order in fresh installation and patched one
					# Try to add, ignore result because this may fail if field is already here
					echo "ALTER TABLE Devices_bkp ADD COLUMN rtsp_rtp_prefer_tcp boolean NOT NULL DEFAULT 1 AFTER rtsp_password" | mysql -D"$dbname" -u"$user" -p"$password" || true
					# Try to move it to be after rtsp_password for the case it was added in the end
					echo "ALTER TABLE Devices_bkp MODIFY COLUMN rtsp_rtp_prefer_tcp boolean NOT NULL DEFAULT 1 AFTER rtsp_password" | mysql -D"$dbname" -u"$user" -p"$password"

					# 2.1.7-1 DB patch
					echo "ALTER TABLE Storage_bkp DROP COLUMN record_time" | mysql -D"$dbname" -u"$user" -p"$password" || true

					# Drop "?tcp" and "?udp" postfixes from RTSP URLs in Devices
					echo "UPDATE Devices_bkp SET device = SUBSTRING(device, 1, LENGTH(device) - 4) WHERE SUBSTRING(device, -4) = '?udp' OR SUBSTRING(device, -4) = '?tcp'" | mysql -D"$dbname" -u"$user" -p"$password"

					# Now table contents copying should work

					# All other tables columns modifications (besides of constraints) are from 2.0.0 days, those versions are not used as of present days (May 2014)
					# preinst checks that version is not less than 2.0.3

					for x_bkp in `echo "show tables" | mysql -D"$dbname" -u"$user" -p"$password" | tail -n +2 | grep _bkp`
					do
						x=`echo $x_bkp | sed 's/_bkp//'`
						echo "SET FOREIGN_KEY_CHECKS=0; INSERT INTO $x SELECT * FROM $x_bkp" | mysql -D"$dbname" -u"$user" -p"$password"
						# Drop all *_bkp tables
						echo "SET FOREIGN_KEY_CHECKS=0; DROP TABLE $x_bkp" | mysql -D"$dbname" -u"$user" -p"$password"
						echo "SET FOREIGN_KEY_CHECKS=1" | mysql -D"$dbname" -u"$user" -p"$password" # Restore setting just in case
					done

					export DB_VERSION=2020000 # to assist apply_db_patches() logics
					apply_db_patches

					# Reenable our site in Apache
					if [ ! -z `which service` ]; then
						service apache2 start || true
					else
						invoke-rc.d apache2 start || true
					fi

				else
					# If there is a DB version stored (2.2 and newer was installed):
					apply_db_patches  # uses $DB_VERSION value, exported
				fi # Whether there was non-empty DB_VERSION

				if [[ "$DB_VERSION" != "`cat /usr/share/bluecherry/installed_db_version`" ]]
				then
					echo "DB_VERISON $DB_VERSION after applying DB patches is different from `cat /usr/share/bluecherry/installed_db_version` in /usr/share/bluecherry/installed_db_version" >&2
					false
				fi
				echo "DELETE FROM GlobalSettings WHERE parameter = 'G_DB_VERSION'" | mysql -u"$user" -p"$password" -D"$dbname"
				echo "INSERT INTO GlobalSettings (parameter, value) VALUES ('G_DB_VERSION', '$DB_VERSION')" | mysql -u"$user" -p"$password" -D"$dbname"
			fi # Whether old and new DB version match
		fi # Whether there was an upgrade or fresh install
		/usr/share/bluecherry/compare.sh >&2
		trap - ERR

                #Creating read-only SQLITE Database
		if [ ! -d "/usr/share/bluecherry/sqlite" ]; then
			# Create directory if it doesn't exist
			mkdir /usr/share/bluecherry/sqlite
		fi
		chown www-data /usr/share/bluecherry/sqlite
		echo ".read /usr/share/bluecherry/camera_info_sqlite_data.sql" | sqlite3 /usr/share/bluecherry/sqlite/cameras.db

		# End of DB management
		;;
esac

#DEBHELPER#

db_stop
