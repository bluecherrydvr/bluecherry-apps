.DEFAULT_GOAL := all

configure = cd $(dir $@) && CC="ccache gcc" CXX="ccache g++" \
	    ./configure --prefix=$(STAGE) --disable-static --enable-shared

 ###############
### libconfig ###
 ###############
pkgs += libconfig
libconfig-gitrev = $(shell GIT_DIR=$(TOPDIR)/misc/libconfig/.git git describe)
libconfig-contrib-dir = $(CONTRIB_DIR)/libconfig/$(libconfig-gitrev)
secondaries += libconfig/Makefile $(STAGE)/lib/libconfig.so

libconfig-clean: FORCE
	-$(MAKE) -C libconfig clean
	-rm libconfig/Makefile

libconfig/Makefile:
	cd $(dir $@) && autoreconf -if
	$(configure) --disable-examples -disable-cxx

$(STAGE)/lib/libconfig.so: libconfig/Makefile
	$(MAKE) $(MAKEARGS) -C libconfig install

$(libconfig-contrib-dir)/libconfig.so: $(STAGE)/lib/libconfig.so
	mkdir -p $(libconfig-contrib-dir)
	cp -a $(STAGE)/lib/libconfig.so* $(STAGE)/include/libconfig.h $(libconfig-contrib-dir)

libconfig-install: $(libconfig-contrib-dir)/libconfig.so
	test -e $(STAGE)/lib/libconfig.so \
		|| mkdir -p $(STAGE)/lib $(STAGE)/include \
			&& cp -a $(libconfig-contrib-dir)/libconfig.so* $(STAGE)/lib/ \
			&& cp $(libconfig-contrib-dir)/libconfig.h $(STAGE)/include/

 ###############
###   libav   ###
 ###############
pkgs += libav

libav-gitrev = $(shell GIT_DIR=$(TOPDIR)/misc/libav/.git git describe)
libav-contrib-dir = $(CONTRIB_DIR)/libav/$(libav-gitrev)

secondaries += libav/config.mak $(STAGE)/bin/ffmpeg

libav/config.mak:
	$(configure) \
		--cc="$(CC)" \
		--enable-pic \
		--disable-stripping \
		--disable-doc \
		\
		--disable-libxcb \
		--disable-xlib \
		--disable-sdl \
		\
		--disable-everything \
		\
		--enable-indev=v4l2 \
		\
		--enable-protocol=file \
		--enable-protocol=pipe \
		--enable-protocol=http \
		--enable-protocol=https \
		\
		--enable-muxer=matroska \
		--enable-muxer=mjpeg \
		--enable-muxer=rtp \
		--enable-muxer=mp4 \
		--enable-muxer=image2 \
		--enable-muxer=rawvideo \
		\
		--enable-demuxer=rtsp \
		--enable-demuxer=matroska \
		--enable-demuxer=mjpeg \
		--enable-demuxer=rawvideo \
		\
		--enable-decoder=h264 \
		--enable-decoder=mpeg4 \
		--enable-decoder=mjpeg \
		--enable-decoder=rawvideo \
		\
		--enable-parser=h264 \
		--enable-parser=mpeg4video \
		--enable-parser=mjpeg \
		\
		--enable-encoder=mjpeg \
		--enable-encoder=mpeg4 \
		--enable-encoder=rawvideo \
		\
		--enable-filter=scale \
		--enable-filter=fps \
		\



libav-clean: FORCE
	-$(MAKE) -C libav distclean

$(STAGE)/bin/ffmpeg: libav/config.mak
	$(MAKE) $(MAKEARGS) V=1 -C libav -j $(NCPU) install

$(libav-contrib-dir)/bin/ffmpeg: $(STAGE)/bin/ffmpeg
	mkdir -p $(libav-contrib-dir)/lib
	mkdir -p $(libav-contrib-dir)/bin
	mkdir -p $(libav-contrib-dir)/include
	cp -a $(STAGE)/lib/libav*.so* $(STAGE)/lib/libsw*.so* $(libav-contrib-dir)/lib
	cp $(STAGE)/bin/ff* $(libav-contrib-dir)/bin
	cp -r $(STAGE)/include/libav* $(STAGE)/include/libsw* $(libav-contrib-dir)/include

libav-install: $(libav-contrib-dir)/bin/ffmpeg
	test -e $(STAGE)/bin/ffmpeg \
		|| cp -r $(libav-contrib-dir)/* $(STAGE)/

 ###############
### pugixml   ###
 ###############
pkgs += pugixml

pugixml-gitrev = $(shell GIT_DIR=$(TOPDIR)/misc/pugixml/.git git describe --long --tags )
pugixml-contrib-dir = $(CONTRIB_DIR)/pugixml/$(pugixml-gitrev)

secondaries += pugixml/Makefile $(STAGE)/lib/libpugixml.so

pugixml-clean: FORCE
	-$(MAKE) -C pugixml clean
	-rm pugixml/Makefile

pugixml/Makefile:
	cd pugixml && CC="ccache gcc" CXX="ccache g++" cmake -DCMAKE_INSTALL_PREFIX=$(STAGE) -DBUILD_SHARED_LIBS=1 scripts/

$(STAGE)/lib/libpugixml.so: pugixml/Makefile
	$(MAKE) $(MAKEARGS) -C pugixml install

$(pugixml-contrib-dir)/libpugixml.so: $(STAGE)/lib/libpugixml.so
	mkdir -p $(pugixml-contrib-dir)
	cp -a $(STAGE)/lib/libpugixml.so* $(STAGE)/include/*.hpp $(pugixml-contrib-dir)

pugixml-install: $(pugixml-contrib-dir)/libpugixml.so
	test -e $(pugixml-libs) \
		|| mkdir -p $(STAGE)/lib $(STAGE)/include \
			&& cp $(pugixml-contrib-dir)/*.so* $(STAGE)/lib/ \
			&& cp $(pugixml-contrib-dir)/*.hpp $(STAGE)/include/

 ####################
### Common targets ###
 ####################

all: $(foreach d,$(pkgs), $d-install)

install: $(foreach d,$(pkgs), $d-install) FORCE
	$(INSTALL_PROG) -d $(DESTDIR)$(libexec_dir)
	$(INSTALL_PROG) $(STAGE)/lib/*.so* $(STAGE)/bin/* -t $(DESTDIR)$(libexec_dir)

clean: $(foreach d,$(pkgs), $d-clean) FORCE
	rm -rf $(STAGE)

.SECONDARY: $(secondaries)

FORCE:
